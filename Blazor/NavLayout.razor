@inherits LayoutComponentBase
@using Advanced.Services

<div class="container-fluid">
	<div class="row">
		<div class="col-3">
			<div class="d-grid gap-2">
				@foreach (string key in NavLinks.Keys) {
					<!--<NavLink class="btn btn-outline-primary" href="@NavLinks[key]" ActiveClass="btn-primary text-white" Match="NavLinkMatch.Prefix">@key</NavLink>-->
					<MultiNavLink class="btn btn-outline-primary btn-block" href="@NavLinks[key]" ActiveClass="btn-primary text-white" DisabledClasses="btn btn-dark text-light btn-block disabled" @ref="Refs[key]">@key</MultiNavLink>
				}
				<button class="btn btn-secondary btn-block mt-5" @onclick="ToggleLinks">Toggle Links</button>
				<NavLink class="btn btn-info" href="/links">Go To Links Screen</NavLink>
			</div>
		</div>
		<div class="col">@Body</div>
	</div>
</div>

@code {
 /*public Dictionary<string, string> NavLinks = new Dictionary<string, string> {
	 {"People", "/people" },
	 {"Departments", "/depts" },
	 {"Details", "/person" }
 };*/


	[Inject]
	public ToggleService? Toggler { get; set; }
	
	[Inject]
	public IJSRuntime? JSRuntime { get; set; }

	public Dictionary<string, string[]> NavLinks = new Dictionary<string, string[]> {
		{"People", new string[] {"/people", "/" } },
		{"Departments", new string[] {"/depts", "/departments" } },
		{"Details", new string[] { "/person" } }
		};

	public Dictionary<string, MultiNavLink?> Refs = new Dictionary<string, MultiNavLink?>();
	
	//private bool LinksEnabled = true;

	//protected override void OnAfterRender(bool firstRender)
	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender && Toggler != null)
		{
			Toggler.EnrolComponents(Refs.Values as IEnumerable<MultiNavLink>);
			await JSRuntime!.InvokeVoidAsync("createToggleButton", DotNetObjectReference.Create(Toggler));
		}
	}

	public void ToggleLinks()
	{
		/*LinksEnabled = !LinksEnabled;

		foreach (MultiNavLink? link in Refs.Values)
		{
			link?.SetEnabled(LinksEnabled);
		}*/

		Toggler?.ToggleComponents();
	}
}
